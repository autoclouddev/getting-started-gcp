## --------------------------------------------------------------------------------------------------------------------
## GITHUB CONFIGURATION
## Define which Github repositories the Terraform blueprint user has access to
##
## This optional configuration will submit a pull request to Github with the Terraform code generated by this blueprint
## after the user has completed the generation steps. This Terraform blueprint is functional without the Github
## integration, and the code may be downloaded after submission for review and deployment, as well as the historical
## activity portion of the Iac catalog on AutoCloud.
##
## Before this feature can be enabled, you will need to integrate
## AutoCloud with your Github organization by deploying the AutoCloud Github application. For more information on this
## process, see https://docs.autocloud.io/integration-with-source-control-github.
##
## Once the integration is configured, uncomment the code block below, as well as the code block defining the git pull
## request parameters at the bottom of this file.
## --------------------------------------------------------------------------------------------------------------------

## ----- BEGIN GITHUB CONFIGURATION ----- ##
# data "autocloud_github_repos" "repos" {}

# locals {
#   # A list of Github repositories the user is allowed to submit Terraform code to, add specific repositories out of the
#   # repositories you have authorized AutoCloud to access to limit users to your infrastructure as code repositories. If
#   # you set these, uncomment the filter lines in the `dest_repos` definition on lines 20-23 below.
#   #
#   # allowed_repos = [
#   #   "example",
#   # ]

#   # Destination repos where generated code will be submitted
#   dest_repos = [
#     for repo in data.autocloud_github_repos.repos.data[*].url : repo

#     # Uncomment if you have defined an allow list for your repos on lines 12-14 above.
#     #
#     # if anytrue([
#     #   for allowed_repo in local.allowed_repos: length(regexall(format("/%s", allowed_repo), repo)) > 0
#     # ])
#   ]
# }
## ----- END GITHUB CONFIGURATION ----- ##



## --------------------------------------------------------------------------------------------------------------------
## GLOBAL BLUEPRINT CONFIGURATION
## Define form questions the user will be shown which are either not associated with any Terraform module, or are shared
## between multiple Terraform modules.
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "global" {
  ###
  # Set the namespace
  variable {
    name         = "namespace"
    display_name = "Namespace"
    helper_text  = "The organization namespace the assets will be deployed in"

    type = "shortText"

    value = <<HCL
     "autocloud"
     HCL
  }

  ###
  # Choose the environment
  variable {
    name         = "environment"
    display_name = "Environment"
    helper_text  = "The environment the assets will be deployed in"

    type = "radio"

    options {
      option {
        label   = "Nonprod"
        value   = <<HCL
        "nonprod"
        HCL
        checked = true
      }
      option {
        label = "Production"
        value = <<HCL
        "production"
        HCL
      }
    }
  }

  ###
  # Collect the name of the asset group
  variable {
    name         = "name"
    display_name = "Name"
    helper_text  = "The name of the encrypted cloud storage bucket"

    type = "shortText"

    validation_rule {
      rule          = "isRequired"
      error_message = "You must provide a name for the encrypted S3 bucket"
    }
  }
}



## --------------------------------------------------------------------------------------------------------------------
## GOOGLE CLOUD CONFIGURATION
## Define Google cloud specific elements that will be added to all assets, such as labels and tags
## between multiple Terraform modules.
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "gcp" {
  source = {
    global = data.autocloud_blueprint_config.global.blueprint_config,
  }

  ###
  # Set the project ID
  variable {
    name         = "project_id"
    display_name = "Project ID"
    helper_text  = "The Google Cloud project ID the assets will be deployed in"

    type = "shortText"

    ###
    # This value can be constructed from other form elements the user provides so that they do not need to know the
    # project ID, or to put restrictions in place as to which projects they can access. For example, the value could
    # be built from namepsace and environment as shown below.

    value = <<HCL
    "{{namespace}}-{{environment}}"
    HCL

    variables = {
      namespace   = "global.variables.namespace",
      environment = "global.variables.environment",
    }

    validation_rule {
      rule          = "isRequired"
      error_message = "You must provide a Google Cloud Platform project ID to deploy the assets into."
    }
  }

  ###
  # Choose the location
  variable {
    name         = "location"
    display_name = "Location"
    helper_text  = "The location the assets will be deployed in"

    type = "radio"

    options {
      option {
        label = "Asia"
        value = <<HCL
        "asia"
        HCL
      }
      option {
        label = "EU"
        value = <<HCL
        "europe"
        HCL
      }
      option {
        label   = "US"
        value   = <<HCL
        "us"
        HCL
        checked = true
      }
      option {
        label = "Worldwide"
        value = <<HCL
        "global"
        HCL
      }
    }
  }

  ###
  # Collect labels to apply to assets
  variable {
    name         = "labels"
    display_name = "Labels"
    helper_text  = "A map of labels to apply to the deployed assets"

    type = "map"
  }
}



## --------------------------------------------------------------------------------------------------------------------
## KMS KEY MODULE
## Define display and output for the KMS key used to encrypt the cloud storage bucket.
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "kms_key" {
  name   = "kmskey"
  source = "github.com/terraform-google-modules/terraform-google-kms?ref=v2.2.2"
}

data "autocloud_blueprint_config" "kms_key" {
  source = {
    global = data.autocloud_blueprint_config.global.blueprint_config,
    gcp    = data.autocloud_blueprint_config.gcp.blueprint_config,
    kms    = autocloud_module.kms_key.blueprint_config
  }

  omit_variables = [
    # Use defaults in the module (don't collect)
    "kms.variables.prevent_destroy",
    "kms.variables.purpose",
    "kms.variables.set_owners_for",
    "kms.variables.owners",
    "kms.variables.set_encrypters_for",
    "kms.variables.encrypters",
    "kms.variables.set_decrypters_for",
    "kms.variables.decrypters",
    "kms.variables.key_rotation_period",
    "kms.variables.key_algorithm",
    "kms.variables.key_protection_level",
  ]

  ###
  # Pass GCP details
  variable {
    name  = "kms.variables.labels"
    type  = "map"
    value = "gcp.variables.labels"
  }

  variable {
    name  = "kms.variables.location"
    type  = "shortText"
    value = "gcp.variables.location"
  }

  variable {
    name  = "kms.variables.project_id"
    type  = "shortText"
    value = "gcp.variables.project_id"
  }

  ###
  # Set keyring name
  variable {
    name         = "keyring"
    display_name = "KMS Keyring Name"

    type = "shortText"

    value = <<HCL
    "{{namespace}}-{{environment}}-{{name}}"
    HCL
    variables = {
      namespace   = "global.variables.namespace"
      environment = "global.variables.environment"
      name        = "global.variables.name"
    }
  }

  ###
  # Set encyrption key
  variable {
    name  = "keys"
    type  = "raw"
    value = <<HCL
    ["default"]
    HCL
  }
}



## --------------------------------------------------------------------------------------------------------------------
## CLOUD STORAGE BUCKET MODULE
## Define display and output for the cloud storage bucket.
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_module" "bucket" {
  name   = "bucket"
  source = "github.com/terraform-google-modules/terraform-google-cloud-storage?ref=v4.0.0"

  footer = <<-EOT

  depends_on = [google_kms_crypto_key_iam_binding.binding]
  EOT
}

data "autocloud_blueprint_config" "bucket" {
  source = {
    global = data.autocloud_blueprint_config.global.blueprint_config,
    gcp    = data.autocloud_blueprint_config.gcp.blueprint_config,
    bucket = autocloud_module.bucket.blueprint_config
  }

  omit_variables = [
    # Use defaults in the module (don't collect)
    "bucket.variables.admins",
    "bucket.variables.bucket_admins",
    "bucket.variables.bucket_creators",
    "bucket.variables.bucket_hmac_key_admins",
    "bucket.variables.bucket_lifecycle_rules",
    "bucket.variables.bucket_policy_only",
    "bucket.variables.bucket_storage_admins",
    "bucket.variables.bucket_viewers",
    "bucket.variables.cors",
    "bucket.variables.creators",
    "bucket.variables.custom_placement_config",
    "bucket.variables.default_event_based_hold",
    "bucket.variables.folders",
    "bucket.variables.force_destroy",
    "bucket.variables.hmac_key_admins",
    "bucket.variables.hmac_service_accounts",
    "bucket.variables.lifecycle_rules",
    "bucket.variables.logging",
    "bucket.variables.names",
    "bucket.variables.prefix",
    "bucket.variables.randomize_suffix",
    "bucket.variables.retention_policy",
    "bucket.variables.set_admin_roles",
    "bucket.variables.set_creator_roles",
    "bucket.variables.set_hmac_access",
    "bucket.variables.set_hmac_key_admin_roles",
    "bucket.variables.set_storage_admin_roles",
    "bucket.variables.set_viewer_roles",
    "bucket.variables.storage_admins",
    "bucket.variables.storage_class",
    "bucket.variables.viewers",
    "bucket.variables.website",
  ]

  ###
  # Pass GCP details
  variable {
    name  = "bucket.variables.labels"
    type  = "map"
    value = "gcp.variables.labels"
  }

  variable {
    name  = "bucket.variables.location"
    type  = "shortText"
    value = "gcp.variables.location"
  }

  variable {
    name  = "bucket.variables.project_id"
    type  = "shortText"
    value = "gcp.variables.project_id"
  }

  ###
  # Set the KMS Keys
  variable {
    name  = "bucket.variables.encryption_key_names"
    //type  = "raw"
    value = <<HCL
    {
      #{{namespace}}-{{environment}}-{{name}} = {{keyring_name}}["default"]
        hello = "world"
      }
    HCL
    variables = {
      namespace    = "global.variables.namespace"
      environment  = "global.variables.environment"
      name         = "global.variables.name"
      keyring_name = autocloud_module.kms_key.outputs.keys
    }
  }

  ###
  # Set Public Access Prevention to Enforced
  variable {
    name  = "bucket.variables.public_access_prevention"
    value = <<HCL
    "enforced"
    HCL
  }

  ###
  # Show the bucket name
  variable {
    name         = "bucket.variables.bucket_name"
    display_name = "Storage Bucket Name"
    type         = "shortText"
    value        = <<HCL
    "{{namespace}}-{{environment}}-{{name}}"
    HCL
    variables = {
      namespace   = "global.variables.namespace"
      environment = "global.variables.environment"
      name        = "global.variables.name"
    }
  }

  ###
  # Set the bucket names
  variable {
    name  = "bucket.variables.names"
    type  = "raw"
    value = <<HCL
    ["{{namespace}}-{{environment}}-{{name}}"]
    HCL
    variables = {
      namespace   = "global.variables.namespace"
      environment = "global.variables.environment"
      name        = "global.variables.name"
    }
  }

  ###
  # Enable versioning
  variable {
    name  = "bucket.variables.versioning"
    type  = "raw"
    value = <<HCL
    { "{{namespace}}-{{environment}}-{{name}}" = true }
    HCL
    variables = {
      namespace   = "global.variables.namespace"
      environment = "global.variables.environment"
      name        = "global.variables.name"
    }
  }
}



## --------------------------------------------------------------------------------------------------------------------
## COMPLETE BLUEPRINT CONFIGURATION
## Combine all the defined Terraform blueprint configurations into the complete blueprint configuration that will be used
## to create the form shown to the end user.
## --------------------------------------------------------------------------------------------------------------------

data "autocloud_blueprint_config" "complete" {
  source = {
    global  = data.autocloud_blueprint_config.global.blueprint_config,
    gcp     = data.autocloud_blueprint_config.gcp.blueprint_config,
    kms_key = data.autocloud_blueprint_config.kms_key.blueprint_config,
    bucket  = data.autocloud_blueprint_config.bucket.blueprint_config
  }

  ###
  # Hide variables from user
  omit_variables = [
    # KMS Key
    "kms_key.variables.project_id",
    "kms_key.variables.location",
    "kms_key.variables.labels",

    # Cloud Storage Bucket
    "bucket.variables.project_id",
    "bucket.variables.location",
    "bucket.variables.labels",
    "bucket.variables.names",
    "bucket.variables.public_access_prevention",
  ]

  display_order {
    priority = 0
    values = [
      "global.variables.namespace",
      "global.variables.environment",
      "global.variables.name",
      "kms_key.variables.keyring",
      "bucket.variables.bucket_name",
      "gcp.variables.location",
      "gcp.variables.project_id",
      "gcp.variables.labels",
    ]
  }
}



## --------------------------------------------------------------------------------------------------------------------
## AUTOCLOUD BLUEPRINT
## Create the AutoCloud Terraform blueprint using the modules and blueprint configurations defined above.
## --------------------------------------------------------------------------------------------------------------------

resource "autocloud_blueprint" "this" {
  name = "[Getting Started] KMS Encrypted Google Cloud Storage Bucket"

  ###
  # UI Configuration
  #
  author       = "example@example.com"
  description  = "Deploy a Google Cloud storage bucket encrypted with a customer managed KMS key"
  instructions = <<-EOT
    This is the form that the end user of the Blueprint (typically an application developer) will fill out in order to dynamically generate Terraform code. When you create a Blueprint, you specify what variables are visible to the end user and what their defaults/options are. Complete the steps below and you will be able to see the Terraform code that is generated by this example Blueprint.

    When you’re done, return to the IaC Catalog page to download the source code and see how this Blueprint was made.
    EOT

  labels = ["gcp"]



  ###
  # Form configuration
  config = data.autocloud_blueprint_config.complete.config



  ###
  # File definitions
  file {
    action      = "CREATE"
    destination = "{{namespace}}-{{environment}}-{{name}}.tf"
    variables = {
      namespace   = data.autocloud_blueprint_config.complete.variables["namespace"]
      environment = data.autocloud_blueprint_config.complete.variables["environment"]
      name        = data.autocloud_blueprint_config.complete.variables["name"]

      module_reference = autocloud_module.kms_key.outputs.keys
    }

    ###
    # Add version requirements and provider configuration to the top of the output file. See ./files/provider_config.hcl.tpl
    # for content to be added.
    header = file("./files/provider_config.hcl.tpl")

    modules = [
      autocloud_module.kms_key.name,
      autocloud_module.bucket.name,
    ]
  }

  ## --------------------------------------------------------------------------------------------------------------------
  ## GITHUB PULL REQUEST CONFIGURATION
  ## Define the Github pull request content
  ##
  ## This optional configuration will submit a pull request to Github with the Terraform code generated by this blueprint
  ## after the user has completed the generation steps. This Terraform blueprint is functional without the Github
  ## integration, and the code may be downloaded after submission for review and deployment, as well as the historical
  ## activity portion of the Iac catalog on AutoCloud.
  ##
  ## Before this feature can be enabled, you will need to integrate
  ## AutoCloud with your Github organization by deploying the AutoCloud Github application. For more information on this
  ## process, see https://docs.autocloud.io/integration-with-source-control-github.
  ##
  ## Once the integration is configured, uncomment the code block below, as well as the code block defining the repository
  ## access parameters at the top of this file.
  ## --------------------------------------------------------------------------------------------------------------------

  ## ----- BEGIN GITHUB CONFIGURATION ----- ##

  ###
  # Destination repository git configuraiton
  #

  # git_config {
  #   destination_branch = "main"

  #   git_url_options = local.dest_repos
  #   git_url_default = length(local.dest_repos) != 0 ? local.dest_repos[0] : "" # Choose the first in the list by default

  #   pull_request {
  #     title                   = "[AutoCloud] new KMS Encrypted S3 Bucket {{namespace}}-{{environment}}-{{name}}, created by {{authorName}}"
  #     commit_message_template = "[AutoCloud] new KMS Encrypted S3 Bucket {{namespace}}-{{environment}}-{{name}}, created by {{authorName}}"
  #     body                    = file("./files/pull_request.md.tpl")
  #     variables = {
  #       authorName  = "generic.authorName"
  #       namespace   = data.autocloud_blueprint_config.complete.variables["namespace"]
  #       environment = data.autocloud_blueprint_config.complete.variables["environment"]
  #       name        = data.autocloud_blueprint_config.complete.variables["name"]
  #     }
  #   }
  # }

  ## ----- END GITHUB CONFIGURATION ----- ##
}
